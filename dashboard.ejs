<!DOCTYPE html>
<html lang="fr">
  <head>
    <title>Dashboard - Gestion des utilisateurs</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="Page de gestion des utilisateurs : ajout, modification et suppression des utilisateurs. Gérez les informations des utilisateurs facilement et efficacement.">
    <meta charset="UTF-8">
    <link rel="stylesheet" type="text/css" href="/css/style.css" />
    <link rel="icon" href="/img/logo.ico" type="image/ico" sizes="16x16" />
  </head>
  <body>
    <header>
      <%- include('components/navbar', { isAuthenticated: isAuthenticated }) %>
    </header>
    <div class="main-container">
        <div class="dashboard-container">
          <h1>Gestion des utilisateurs</h1>
          <div class="dashboard-content">
            <form id="addUserForm">
              <input type="text" id="prenom" placeholder="Prénom" required />
              <input type="text" id="nom" placeholder="Nom" required />
              <input type="email" id="email" placeholder="Email" required />
              <input type="password" id="mdp" placeholder="Mot de passe" required />
              <button type="submit">Ajouter</button>
            </form>
          </div>
  
          <h2>Liste des utilisateurs</h2>
          <ul id="userList"></ul>
        </div>
        <div id="editCard" class="edit-card hidden">
          <h2>Modifier l'utilisateur</h2>
          <form id="editUserForm">
            <input type="text" id="edit-prenom" placeholder="Prénom" required />
            <input type="text" id="edit-nom" placeholder="Nom" required />
            <input type="email" id="edit-email" placeholder="Email" required />
            <input type="password" id="edit-mdp" placeholder="Nouveau mot de passe (optionnel)" />
            <button type="submit">Modifier</button>
            <button type="button" id="cancelEdit">Annuler</button>
          </form>
        </div>
      </div>
    <script src="/js/script.js"></script>
    <script>
      async function fetchUsers() {
        try {
          const response = await fetch('/api/utilisateur/all');
          if (!response.ok) {
            throw new Error('Erreur lors de la récupération des utilisateurs');
          }
          const users = await response.json();
          const userList = document.getElementById('userList');
          userList.innerHTML = '';
          users.forEach(user => {
            const li = document.createElement('li');
            li.innerHTML = `
              ${user.prenom_utilisateur} ${user.nom_utilisateur} (${user.email_utilisateur})
              <button onclick="deleteUser(${user.id_utilisateur})">Supprimer</button>
              <button onclick="editUser(${user.id_utilisateur}, '${user.prenom_utilisateur}', '${user.nom_utilisateur}', '${user.email_utilisateur}')">Modifier</button>
            `;
            userList.appendChild(li);
          });
        } catch (error) {
          console.error('Erreur fetchUsers:', error);
          alert('Erreur lors de la récupération des utilisateurs');
        }
      }
      document.getElementById('addUserForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const prenom = document.getElementById('prenom').value;
        const nom = document.getElementById('nom').value;
        const email = document.getElementById('email').value;
        const mdp = document.getElementById('mdp').value;
        try {
            const response = await fetch('/api/utilisateur', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                prenom_utilisateur: prenom,
                nom_utilisateur: nom,
                email_utilisateur: email,
                mdp_utilisateur: mdp,
            }),
            });
            if (!response.ok) {
            throw new Error('Erreur lors de l\'ajout de l\'utilisateur');
            }
            fetchUsers();
        } catch (error) {
            console.error('Erreur addUser:', error);
            alert('Erreur lors de l\'ajout de l\'utilisateur');
        }
    });
      async function deleteUser(id) {
        try {
          const response = await fetch(`/api/utilisateur/${id}`, { method: 'DELETE' });
          if (!response.ok) {
            throw new Error('Erreur lors de la suppression de l\'utilisateur');
          }
          fetchUsers();
        } catch (error) {
          console.error('Erreur deleteUser:', error);
          alert('Erreur lors de la suppression de l\'utilisateur');
        }
      }
      async function editUser(id, currentPrenom, currentNom, currentEmail) {
        const prenom = prompt('Prénom:', currentPrenom);
        const nom = prompt('Nom:', currentNom);
        const email = prompt('Email:', currentEmail);
        if (!prenom || !nom || !email) {
          alert('Tous les champs sont obligatoires');
          return;
        }
        try {
          const response = await fetch(`/api/utilisateur/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prenom_utilisateur: prenom, nom_utilisateur: nom, email_utilisateur: email }),
          });
          if (!response.ok) {
            throw new Error('Erreur lors de la modification de l\'utilisateur');
          }
          fetchUsers();
        } catch (error) {
          console.error('Erreur editUser:', error);
          alert('Erreur lors de la modification de l\'utilisateur');
        }
      }
      async function editUser(id, currentPrenom, currentNom, currentEmail) {
        const editCard = document.getElementById('editCard');
        const editPrenom = document.getElementById('edit-prenom');
        const editNom = document.getElementById('edit-nom');
        const editEmail = document.getElementById('edit-email');
        const editMdp = document.getElementById('edit-mdp');
        editPrenom.value = currentPrenom;
        editNom.value = currentNom;
        editEmail.value = currentEmail;
        editMdp.value = '';
        editCard.classList.remove('hidden');
        const editUserForm = document.getElementById('editUserForm');
        editUserForm.onsubmit = async (e) => {
            e.preventDefault();
            const prenom = editPrenom.value;
            const nom = editNom.value;
            const email = editEmail.value;
            const mdp = editMdp.value;
            if (!prenom || !nom || !email) {
                alert('Tous les champs sont obligatoires');
                return;
            }
            try {
                const body = {
                    prenom_utilisateur: prenom,
                    nom_utilisateur: nom,
                    email_utilisateur: email,
                };
                if (mdp) {
                    body.mdp_utilisateur = mdp;
                }
                const response = await fetch(`/api/utilisateur/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(body),
                });
                if (!response.ok) {
                    throw new Error('Erreur lors de la modification de l\'utilisateur');
                }
                fetchUsers();
                editCard.classList.add('hidden');
            } catch (error) {
            console.error('Erreur editUser:', error);
            alert('Erreur lors de la modification de l\'utilisateur');
            }
        };
        document.getElementById('cancelEdit').onclick = () => {
            editCard.classList.add('hidden');
        };
        }
        fetchUsers();
    </script>
  </body>
</html>