const db=require("../models/db"),bcrypt=require("bcrypt"),jwt=require("jsonwebtoken"),dotenv=require("dotenv");dotenv.config(),exports.register=async(e,t)=>{const{prenom_utilisateur:s,nom_utilisateur:i,email_utilisateur:r,mdp_utilisateur:u}=e.body;console.log("ce que j'aiiiiiiii :",e.body);try{const[e]=await db.execute("SELECT * FROM utilisateur WHERE email_utilisateur = ?",[r]);if(e.length>0)return t.status(400).json({message:"Email déjà utilisé"});const a=await bcrypt.hash(u,10),[o]=await db.execute("INSERT INTO utilisateur (prenom_utilisateur, nom_utilisateur, email_utilisateur, mdp_utilisateur) VALUES (?, ?, ?, ?)",[s,i,r,a]),n={id_utilisateur:o.insertId,prenom_utilisateur:s,nom_utilisateur:i,email_utilisateur:r},l=jwt.sign(n,process.env.JWT_SECRET,{expiresIn:"1h"});console.log("Compte créé avec succès :",n),t.status(201).json({token:l,user:n})}catch(e){console.error("Erreur lors de l'inscription :",e),t.status(500).json({message:"Erreur serveur",error:e})}},exports.login=async(e,t)=>{const{email_utilisateur:s,mdp_utilisateur:i}=e.body;try{const[r]=await db.execute("SELECT * FROM utilisateur WHERE email_utilisateur = ?",[s]);if(0===r.length)return t.status(400).json({message:"Email ou mot de passe incorrect"});const u=r[0];if(!await bcrypt.compare(i,u.mdp_utilisateur))return t.status(400).json({message:"Email ou mot de passe incorrect"});const a={id_utilisateur:u.id_utilisateur,prenom_utilisateur:u.prenom_utilisateur,nom_utilisateur:u.nom_utilisateur,email_utilisateur:u.email_utilisateur},o=jwt.sign(a,process.env.JWT_SECRET,{expiresIn:"1h"});console.log("Compte connecté avec succès"),e.session.user=u,t.status(200).json({token:o,user:a})}catch(e){t.status(500).json({message:"Erreur serveur",error:e})}};