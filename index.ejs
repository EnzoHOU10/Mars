<!DOCTYPE html>
<html>
  <head>
    <title>Weather</title>
    <meta charset="UTF-8" />
    <link rel="stylesheet" type="text/css" href="css/style.css" />
  </head>
  <header>
    <nav>
      <div class="logo">
        <a href="/">Mars</a>
      </div>
      <img src="../../logo_white.png" alt="logo" class="img-logo" />
      <div class="nav-buttons">
        <% if (isAuthenticated) { %>
          <button class="btn-nav" onclick="toggleIsHidden()">Account</button>
        <% } else { %>
          <button class="btn-nav" onclick="toggleIsHidden()">Sign In | Register</button>
        <% } %>
      </div>
    </nav>
  </header>
  <body>
    <div class="rotating-background"></div>

    <div class="info-page">
    
      <!-- Section des mini cartes en haut -->
      <div class="info-summary">
        <% weathers.forEach(function(weather, index) { %>
          <div class="summary-card" onclick="showDetails('<%= index %>')">
            <h2>Jour <%= weather.sol %></h2>
            <p>Temp√©rature moyenne: <%= weather.temperature.av %>¬∞C</p>
            <p>Temp√©rature min: <%= weather.temperature.mn %>¬∞C</p>
            <p>Temp√©rature max: <%= weather.temperature.mx %>¬∞C</p>
            <% if (weather.temperature.av > 0) { %>
              <img src="/img/weather/sun.png" alt="Weather" />
            <% } else { %>
              <img src="/img/weather/snow.png" alt="Weather" />
            <% } %>
          </div>
        <% }); %>
      </div>
    
      <!-- Section de la carte horizontale avec les d√©tails -->
      <div class="slider-container">
        <% weathers.forEach(function(weather, index) { %>
          <div class="slider-card" id="card-<%= index %>" style="display: none;">
            <h2>Jour <%= weather.sol %> - D√©tails</h2>
      
            <div class="columns-wrapper">
              <div class="column">
                <p><strong>üå°Ô∏èTemp√©rature</strong></p>
                <p>Min: <%= weather.temperature.mn %> ¬∞C</p>
                <p>Max: <%= weather.temperature.mx %> ¬∞C</p>
                <p>Moyenne: <%= weather.temperature.av %> ¬∞C</p>
              </div>
              <div class="column">
                <p><strong>üí®Vent</strong></p>
                <p>Min: <%= weather.HWS?.mn ?? "N/A" %> m/s</p>
                <p>Max: <%= weather.HWS?.mx ?? "N/A" %> m/s</p>
                <p>Moyenne: <%= weather.HWS?.av ?? "N/A" %> m/s</p>
              </div>
              <div class="column">
                <p><strong>üí•Pression</strong></p>
                <p>Min: <%= weather.PRE?.mn ?? "N/A" %> Pa</p>
                <p>Max: <%= weather.PRE?.mx ?? "N/A" %> Pa</p>
                <p>Moyenne: <%= weather.PRE?.av ?? "N/A" %> Pa</p>
              </div>
            </div>
          </div>
        <% }); %>
      </div>
      
    </div>
    
  </body>
  <script>
    const background = document.querySelector('.rotating-background');
    window.addEventListener('scroll', () => {
      const rotation = window.scrollY * 0.05;
      background.style.transform = `rotate(${rotation}deg)`;
    });
    // Fonction pour afficher les d√©tails d'une carte s√©lectionn√©e
    function showDetails(index) {
      const allCards = document.querySelectorAll('.slider-card');
      allCards.forEach(card => {
        card.style.display = 'none';
      });
      const selectedCard = document.getElementById(`card-${index}`);
      selectedCard.style.display = 'block';
    }
    function toggleMenu() {
      this.menuActive = !this.menuActive;
    }
    function checkAuth() {
      const token = localStorage.getItem("token");
      const user = JSON.parse(localStorage.getItem("user"));
      if (token && user) {
        this.isAuthenticated = true;
        this.user = user;
      }
    }
    function showLoginPage() {
      this.showLogin = true;
      this.showRegister = false;
    }
    function showRegisterPage() {
      this.showRegister = true;
      this.showLogin = false;
    }

    function showNothing() {
      this.showLogin = false;
      this.showRegister = false;
      this.isHidden = true;
    }

    async function handleLogin() {
      const email = document.getElementById("login-email").value;
      const mdp = document.getElementById("login-mdp").value;

      try {
        const response = await fetch("/api/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            email_utilisateur: email,
            mdp_utilisateur: mdp,
          }),
        });

        if (!response.ok) {
          alert("Email ou mot de passe incorrect");
          return;
        }

        const user = await response.json();
        localStorage.setItem("token", "dummyToken");
        localStorage.setItem("user", JSON.stringify(user));
        alert("Connexion r√©ussie !");
        location.reload();
      } catch (error) {
        console.error("Erreur login:", error);
        alert("Erreur de connexion");
      }
    }

    async function handleRegister() {
      const prenom = document.getElementById("register-prenom").value;
      const nom = document.getElementById("register-nom").value;
      const email = document.getElementById("register-email").value;
      const mdp = document.getElementById("register-mdp").value;

      try {
        const response = await fetch("/api/register", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            prenom_utilisateur: prenom,
            nom_utilisateur: nom,
            email_utilisateur: email,
            mdp_utilisateur: mdp,
          }),
        });

        if (!response.ok) {
          alert("Erreur lors de l'inscription");
          return;
        }

        const user = await response.json();
        localStorage.setItem("token", "dummyToken");
        localStorage.setItem("user", JSON.stringify(user));
        alert("Inscription r√©ussie !");
        location.reload();
      } catch (error) {
        console.error("Erreur inscription:", error);
        alert("Erreur d'inscription");
      }
    }

    async function modify() {
      const user = JSON.parse(localStorage.getItem("user"));
      const userId = user?.id_utilisateur;

      const prenom = document.getElementById("modify-prenom").value;
      const nom = document.getElementById("modify-nom").value;
      const email = document.getElementById("modify-email").value;
      const mdp = document.getElementById("modify-mdp").value;

      try {
        const response = await fetch(`/api/user/${userId}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            prenom_utilisateur: prenom,
            nom_utilisateur: nom,
            email_utilisateur: email,
            mdp_utilisateur: mdp,
          }),
        });

        if (!response.ok) {
          alert("Erreur lors de la modification");
          return;
        }

        const updatedUser = await response.json();
        localStorage.setItem("user", JSON.stringify(updatedUser));
        alert("Profil modifi√© avec succ√®s !");
        location.reload();
      } catch (error) {
        console.error("Erreur modification:", error);
        alert("Erreur lors de la modification");
      }
    }
    function logout() {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      this.user = null;
      this.isAuthenticated = false;
    }
    function toggleIsHidden() {
      this.isHidden = !this.isHidden;
      if (this.isHidden) {
        this.showLogin = false;
        this.showRegister = false;
      }
    }
    
  </script>
  
</html>
