const db=require("../models/db.min.js"),bcrypt=require("bcrypt");exports.getUser=async(s,t)=>{try{const[e]=await db.execute("SELECT * FROM utilisateur WHERE id_utilisateur = ?",[s.params.id]);if(0===e.length)return t.status(404).json({message:"Utilisateur non trouvé"});t.status(200).json(e[0])}catch(s){t.status(500).json({message:"Erreur serveur",error:s})}},exports.getAllUsers=async(s,t)=>{try{const[s]=await db.execute("SELECT id_utilisateur, prenom_utilisateur, nom_utilisateur, email_utilisateur FROM utilisateur");t.status(200).json(s)}catch(s){t.status(500).json({message:"Erreur serveur",error:s})}},exports.addUser=async(s,t)=>{try{const{prenom_utilisateur:e,nom_utilisateur:r,email_utilisateur:u,mdp_utilisateur:a}=s.body;if(!(e&&r&&u&&a))return t.status(400).json({message:"Tous les champs sont obligatoires"});const i=await bcrypt.hash(a,10);await db.execute("INSERT INTO utilisateur (prenom_utilisateur, nom_utilisateur, email_utilisateur, mdp_utilisateur) VALUES (?, ?, ?, ?)",[e,r,u,i]),t.status(201).json({message:"Utilisateur ajouté avec succès"})}catch(s){console.error("Erreur lors de l'ajout de l'utilisateur:",s),t.status(500).json({message:"Erreur serveur",error:s})}},exports.updateUser=async(s,t)=>{try{const{prenom_utilisateur:e,nom_utilisateur:r,email_utilisateur:u}=s.body;await db.execute("UPDATE utilisateur SET prenom_utilisateur = ?, nom_utilisateur = ?, email_utilisateur = ? WHERE id_utilisateur = ?",[e,r,u,s.params.id]),t.status(200).json({message:"Utilisateur mis à jour avec succès"})}catch(s){t.status(500).json({message:"Erreur serveur",error:s})}},exports.deleteUser=async(s,t)=>{try{await db.execute("DELETE FROM utilisateur WHERE id_utilisateur = ?",[s.params.id]),t.status(200).json({message:"Utilisateur supprimé avec succès"})}catch(s){t.status(500).json({message:"Erreur serveur",error:s})}};